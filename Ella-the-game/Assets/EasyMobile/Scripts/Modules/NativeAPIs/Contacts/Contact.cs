using System;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using EasyMobile.Internal;

#if UNITY_IOS
using EasyMobile.iOS.Foundation;
using EasyMobile.iOS.UIKit;
#endif

namespace EasyMobile
{
    /// <summary>
    /// Device contact's data.
    /// </summary>
    [Serializable]
    public class Contact
    {
        #region Fields & Properties

        [SerializeField, HideInInspector] // Id is generated by the device.
        private string id = string.Empty;

        [SerializeField]
        private string firstName = null, middleName = null, lastName = null;

        [SerializeField]
        private string company = null;

        [SerializeField]
        private DateTime birthday;

        [SerializeField]
        private StringStringKeyValuePair[] phoneNumbers = null,
                                                   emails = null;

        [SerializeField]
        private Texture2D photo = null;

        /// <summary>
        /// Contact's id.
        /// </summary>
        public string Id
        {
            get { return id; }
            internal set { id = value; }
        }

        /// <summary>
        /// Contact's first name.
        /// </summary>
        public string FirstName
        {
            get { return firstName; }
            internal set { firstName = value; }
        }

        /// <summary>
        /// Contact's middle name.
        /// </summary>
        public string MiddleName
        {
            get { return middleName; }
            internal set { middleName = value; }
        }

        /// <summary>
        /// Contact's last name.
        /// </summary>
        public string LastName
        {
            get { return lastName; }
            internal set { lastName = value; }
        }

        /// <summary>
        /// Contact's company.
        /// </summary>
        public string Company
        {
            get { return company; }
            internal set { company = value; }
        }

        /// <summary>
        /// Contact's address.
        /// </summary>
        /// <value>The birthday.</value>
        public DateTime? Birthday
        {
            get
            {
                if (birthday == default(DateTime))
                    return null;

                return birthday;
            }

            internal set
            {
                birthday = value != null ? value.Value : default(DateTime);
            }
        }

        /// <summary>
        /// Contact's phone numbers and theirs label.
        /// </summary>
        public KeyValuePair<string, string>[] PhoneNumbers
        {
            get
            {
                if (phoneNumbers == null)
                    return null;

                var pairs = phoneNumbers.ToKeyValuePairs();
                if (pairs == null)
                    return null;

                return pairs.ToArray();
            }

            internal set
            {
                if (value == null)
                {
                    phoneNumbers = null;
                    return;
                }

                var pairs = value.ToSerializableKeyValuePairs();
                if (pairs == null)
                {
                    phoneNumbers = null;
                    return;
                }

                phoneNumbers = pairs.Select(pair => new StringStringKeyValuePair(pair.Key, pair.Value)).ToArray();
            }
        }

        /// <summary>
        /// Contact's emails and theirs label.
        /// </summary>
        public KeyValuePair<string, string>[] Emails
        {
            get
            {
                if (emails == null)
                    return null;

                var pairs = emails.ToKeyValuePairs();
                if (pairs == null)
                    return null;

                return pairs.ToArray();
            }

            internal set
            {
                if (value == null)
                {
                    emails = null;
                    return;
                }

                var pairs = value.ToSerializableKeyValuePairs();
                if (pairs == null)
                {
                    emails = null;
                    return;
                }

                emails = pairs.Select(pair => new StringStringKeyValuePair(pair.Key, pair.Value)).ToArray();
            }
        }

        /// <summary>
        /// Contact's photo. 
        /// Note that this image will only start loading when you first access it 
        /// or you can call <see cref="LoadPhoto"/> manually.
        /// </summary>
        public Texture2D Photo
        {
            get
            {
                if (!IsPhotoLoaded)
                    LoadPhoto();

                return photo;
            }

            internal set { photo = value; }
        }

        /// <summary>
        /// Check if the <see cref="Photo"/> is loaded.
        /// </summary>
        public bool IsPhotoLoaded
        {
            get; private set;
        }

        /// <summary>
        /// Is <see cref="LoadPhoto"/> still running?
        /// </summary>
        public bool IsLoadingPhoto
        {
            get; private set;
        }

        /// <summary>
        /// Internal method to load contact's photo from native side.
        /// </summary>
        internal Func<Texture2D> loadPhotoFunc = null;

        #endregion

        #region Methods

        /// <summary>
        /// Load the image into <see cref="Photo"/>.
        /// </summary>
        public void LoadPhoto()
        {
            #if (UNITY_IOS || UNITY_ANDROID) && !UNITY_EDITOR
            if (IsLoadingPhoto)
                return;

            if (loadPhotoFunc == null)
                return;

            IsLoadingPhoto = true;
            photo = loadPhotoFunc();
            IsLoadingPhoto = false;
            IsPhotoLoaded = photo != null;
            #else
            Debug.LogWarning("Loading image is not supported on this platform.");
            #endif
        }

        public override string ToString()
        {
            string phoneNumbersString = DictionaryToString(PhoneNumbers);
            string emailsString = DictionaryToString(Emails);

            return string.Format("Contact[Id={0}, " +
                                 "First Name={1}, " +
                                 "Middle Name={2}, " +
                                 "Last Name={3}, " +
                                 "Company={4}, " +
                                 "Birthday={5}, " +
                                 "PhoneNumber={6}, " +
                                 "Email={7}]",
                                 Id ?? "empty",
                                 FirstName ?? "empty",
                                 MiddleName ?? "empty",
                                 LastName ?? "empty",
                                 Company ?? "empty",
                                 Birthday != null ? Birthday.Value.ToShortDateString() : "empty",
                                 phoneNumbersString, 
                                 emailsString);
        }

        private string DictionaryToString(KeyValuePair<string, string>[] dict)
        {
            if (dict == null)
                return "null";

            if (dict.Length < 1)
                return "empty";

            return string.Join(",", dict.Select(x => string.Format("[{0}, {1}]", x.Key ?? "null", x.Value ?? "null")).ToArray());
        }

        #endregion
    }
}
